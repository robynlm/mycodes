# File produced by Kranc

STORAGE: propertime[timelevels]

STORAGE: propertimerhs[rhs_timelevels]
schedule CosmoLapse_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule CosmoLapse_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"

schedule CosmoLapse_dtLapsePostStep IN MoL_PostStep AFTER ML_BSSN_ADMBaseBoundaryScalar BEFORE ADMBase_SetADMVars
{
  LANG: C
  READS: ADMBase::alp(Everywhere)
  READS: ADMBase::betax(Everywhere)
  READS: ADMBase::betay(Everywhere)
  READS: ADMBase::betaz(Everywhere)
  READS: ML_BSSN::B1(Everywhere)
  READS: ML_BSSN::B2(Everywhere)
  READS: ML_BSSN::B3(Everywhere)
  READS: ML_BSSN::Xt1(Everywhere)
  READS: ML_BSSN::Xt2(Everywhere)
  READS: ML_BSSN::Xt3(Everywhere)
  READS: ML_BSSN::Xt1rhs(Everywhere)
  READS: ML_BSSN::Xt2rhs(Everywhere)
  READS: ML_BSSN::Xt3rhs(Everywhere)
  READS: ML_BSSN::trK(Everywhere)
  READS: CosmoLapse::tau(Everywhere)
  WRITES: ML_BSSN::alpharhs(Interior)
  WRITES: ADMBase::dtalp(Interior)
} "CosmoLapse_dtLapsePostStep"

schedule CosmoLapse_dtLapsePostRHS IN MoL_PostRHS
{
  LANG: C
  READS: ADMBase::alp(Everywhere)
  READS: ADMBase::betax(Everywhere)
  READS: ADMBase::betay(Everywhere)
  READS: ADMBase::betaz(Everywhere)
  READS: ML_BSSN::B1(Everywhere)
  READS: ML_BSSN::B2(Everywhere)
  READS: ML_BSSN::B3(Everywhere)
  READS: ML_BSSN::Xt1(Everywhere)
  READS: ML_BSSN::Xt2(Everywhere)
  READS: ML_BSSN::Xt3(Everywhere)
  READS: ML_BSSN::Xt1rhs(Everywhere)
  READS: ML_BSSN::Xt2rhs(Everywhere)
  READS: ML_BSSN::Xt3rhs(Everywhere)
  READS: ML_BSSN::trK(Everywhere)
  READS: CosmoLapse::tau(Everywhere)
  WRITES: ML_BSSN::alpharhs(Interior)
  WRITES: ADMBase::dtalp(Interior)
} "CosmoLapse_dtLapsePostRHS"

schedule CosmoLapse_dtLapsePostStepBoundary IN MoL_PostStep AFTER CosmoLapse_dtLapsePostStep
{
  LANG: C
  SYNC: ADMBase::dtlapse
  SYNC: ML_BSSN::ML_lapserhs
  WRITES: ML_BSSN::alpharhs(Boundary)
  WRITES: ADMBase::dtalp(Boundary)
} "CosmoLapse_dtLapsePostStepBoundary"

schedule CosmoLapse_dtLapsePostRHSBoundary IN MoL_PostRHS AFTER CosmoLapse_dtLapsePostRHS
{
  LANG: C
  SYNC: ADMBase::dtlapse
  SYNC: ML_BSSN::ML_lapserhs
  WRITES: ML_BSSN::alpharhs(Boundary)
  WRITES: ADMBase::dtalp(Boundary)
} "CosmoLapse_dtLapsePostRHSBoundary"

schedule CosmoLapse_dtShiftPostStep IN MoL_PostStep AFTER ML_BSSN_ADMBaseBoundaryScalar BEFORE ADMBase_SetADMVars
{
  LANG: C
  READS: ADMBase::alp(Everywhere)
  READS: ADMBase::betax(Everywhere)
  READS: ADMBase::betay(Everywhere)
  READS: ADMBase::betaz(Everywhere)
  READS: ML_BSSN::B1(Everywhere)
  READS: ML_BSSN::B2(Everywhere)
  READS: ML_BSSN::B3(Everywhere)
  READS: ML_BSSN::Xt1(Everywhere)
  READS: ML_BSSN::Xt2(Everywhere)
  READS: ML_BSSN::Xt3(Everywhere)
  READS: ML_BSSN::Xt1rhs(Everywhere)
  READS: ML_BSSN::Xt2rhs(Everywhere)
  READS: ML_BSSN::Xt3rhs(Everywhere)
  READS: ML_BSSN::trK(Everywhere)
  READS: CosmoLapse::tau(Everywhere)
  WRITES: ML_BSSN::B1rhs(Interior)
  WRITES: ML_BSSN::B2rhs(Interior)
  WRITES: ML_BSSN::B3rhs(Interior)
  WRITES: ML_BSSN::beta1rhs(Interior)
  WRITES: ML_BSSN::beta2rhs(Interior)
  WRITES: ML_BSSN::beta3rhs(Interior)
  WRITES: ADMBase::dtbetax(Interior)
  WRITES: ADMBase::dtbetay(Interior)
  WRITES: ADMBase::dtbetaz(Interior)
} "CosmoLapse_dtShiftPostStep"

schedule CosmoLapse_dtShiftPostRHS IN MoL_PostRHS
{
  LANG: C
  READS: ADMBase::alp(Everywhere)
  READS: ADMBase::betax(Everywhere)
  READS: ADMBase::betay(Everywhere)
  READS: ADMBase::betaz(Everywhere)
  READS: ML_BSSN::B1(Everywhere)
  READS: ML_BSSN::B2(Everywhere)
  READS: ML_BSSN::B3(Everywhere)
  READS: ML_BSSN::Xt1(Everywhere)
  READS: ML_BSSN::Xt2(Everywhere)
  READS: ML_BSSN::Xt3(Everywhere)
  READS: ML_BSSN::Xt1rhs(Everywhere)
  READS: ML_BSSN::Xt2rhs(Everywhere)
  READS: ML_BSSN::Xt3rhs(Everywhere)
  READS: ML_BSSN::trK(Everywhere)
  READS: CosmoLapse::tau(Everywhere)
  WRITES: ML_BSSN::B1rhs(Interior)
  WRITES: ML_BSSN::B2rhs(Interior)
  WRITES: ML_BSSN::B3rhs(Interior)
  WRITES: ML_BSSN::beta1rhs(Interior)
  WRITES: ML_BSSN::beta2rhs(Interior)
  WRITES: ML_BSSN::beta3rhs(Interior)
  WRITES: ADMBase::dtbetax(Interior)
  WRITES: ADMBase::dtbetay(Interior)
  WRITES: ADMBase::dtbetaz(Interior)
} "CosmoLapse_dtShiftPostRHS"

schedule CosmoLapse_dtShiftPostStepBoundary IN MoL_PostStep AFTER CosmoLapse_dtShiftPostStep
{
  LANG: C
  SYNC: ADMBase::dtshift
  SYNC: ML_BSSN::ML_dtshiftrhs
  SYNC: ML_BSSN::ML_shiftrhs
  WRITES: ML_BSSN::B1rhs(Boundary)
  WRITES: ML_BSSN::B2rhs(Boundary)
  WRITES: ML_BSSN::B3rhs(Boundary)
  WRITES: ML_BSSN::beta1rhs(Boundary)
  WRITES: ML_BSSN::beta2rhs(Boundary)
  WRITES: ML_BSSN::beta3rhs(Boundary)
  WRITES: ADMBase::dtbetax(Boundary)
  WRITES: ADMBase::dtbetay(Boundary)
  WRITES: ADMBase::dtbetaz(Boundary)
} "CosmoLapse_dtShiftPostStepBoundary"

schedule CosmoLapse_dtShiftPostRHSBoundary IN MoL_PostRHS AFTER CosmoLapse_dtShiftPostRHS
{
  LANG: C
  SYNC: ADMBase::dtshift
  SYNC: ML_BSSN::ML_dtshiftrhs
  SYNC: ML_BSSN::ML_shiftrhs
  WRITES: ML_BSSN::B1rhs(Boundary)
  WRITES: ML_BSSN::B2rhs(Boundary)
  WRITES: ML_BSSN::B3rhs(Boundary)
  WRITES: ML_BSSN::beta1rhs(Boundary)
  WRITES: ML_BSSN::beta2rhs(Boundary)
  WRITES: ML_BSSN::beta3rhs(Boundary)
  WRITES: ADMBase::dtbetax(Boundary)
  WRITES: ADMBase::dtbetay(Boundary)
  WRITES: ADMBase::dtbetaz(Boundary)
} "CosmoLapse_dtShiftPostRHSBoundary"

schedule CosmoLapse_InitialTau AT initial after ML_BSSN_InitialADMBase1Everywhere
{
  LANG: C
  WRITES: CosmoLapse::tau(Everywhere)
} "CosmoLapse_InitialTau"

schedule CosmoLapse_RHSTau IN MoL_CalcRHS
{
  LANG: C
  READS: ADMBase::alp(Everywhere)
  READS: ADMBase::gxx(Everywhere)
  READS: ADMBase::gxy(Everywhere)
  READS: ADMBase::gxz(Everywhere)
  READS: ADMBase::gyy(Everywhere)
  READS: ADMBase::gyz(Everywhere)
  READS: ADMBase::gzz(Everywhere)
  READS: ADMBase::betax(Everywhere)
  READS: ADMBase::betay(Everywhere)
  READS: ADMBase::betaz(Everywhere)
  WRITES: CosmoLapse::taurhs(Everywhere)
} "CosmoLapse_RHSTau"

schedule CosmoLapse_InitRHSTau AT analysis BEFORE CosmoLapse_RHSTau
{
  LANG: C
  WRITES: CosmoLapse::taurhs(Everywhere)
} "CosmoLapse_InitRHSTau"

schedule CosmoLapse_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: propertime
} "select boundary conditions"

schedule CosmoLapse_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule CosmoLapse_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"
schedule group ApplyBCs as CosmoLapse_ApplyBCs in MoL_PostStep after CosmoLapse_SelectBoundConds
{
} "Apply boundary conditions controlled by thorn Boundary"

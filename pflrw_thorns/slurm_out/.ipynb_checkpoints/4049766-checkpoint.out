Start time : Thu  6 Jun 17:24:42 BST 2024
--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.8.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 
--------------------------------------------------------------------------------

Cactus version:    4.8.0
Compile date:      Jun 05 2024 (10:19:17)
Run date:          Jun 06 2024 (17:24:43+0100)
Run host:          node177.pri.sciama3.alces.network (pid=9462)
Working directory: /mnt/lustre2/ET_sims/testmpi12/output-0000
Executable:        /users/munozr/code/2020_05/Cactus/exe/cactus_sim
Parameter file:    /mnt/lustre2/ET_sims/testmpi12/output-0000/testmpi12.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->Time CartGrid3D CoordBase Slab SymBase PeriodicCarpet SpaceMask CoordGauge Carpet CarpetLib CarpetInterp CarpetReduce CarpetSlab CarpetRegrid2 InitBase ICPertFLRW_GRH ADMBase ADMMacros ADMCoupling StaticConformal HydroBase TmunuBase EOS_Omni MoL ML_BSSN ML_BSSN_Helper CosmoLapse AEILocalInterp GenericFD LocalReduce LoopControl GRHydro CarpetIOBasic CarpetIOScalar CarpetIOASCII CarpetIOHDF5 NaNChecker <---
Thorn Carpet requests automatic activation of IOUtil
Thorn Carpet requests automatic activation of MPI
Thorn Carpet requests automatic activation of Timers
Thorn CarpetIOHDF5 requests automatic activation of HDF5
Thorn CarpetLib requests automatic activation of Vectors
Thorn CarpetLib requests automatic activation of CycleClock
Thorn GRHydro requests automatic activation of Boundary
Thorn GRHydro requests automatic activation of EOS_Polytrope
Thorn LoopControl requests automatic activation of hwloc
Thorn EOS_Polytrope requests automatic activation of EOS_Base
Thorn HDF5 requests automatic activation of zlib
Activating thorn ADMBase...Success -> active implementation ADMBase
Activating thorn ADMCoupling...Success -> active implementation ADMCoupling
Activating thorn ADMMacros...Success -> active implementation ADMMacros
Activating thorn AEILocalInterp...Success -> active implementation AEILocalInterp
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetInterp...Success -> active implementation interp
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activating thorn CarpetIOBasic...Success -> active implementation IOBasic
Activating thorn CarpetIOHDF5...Success -> active implementation IOHDF5
Activating thorn CarpetIOScalar...Success -> active implementation IOScalar
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn CarpetRegrid2...Success -> active implementation CarpetRegrid2
Activating thorn CarpetSlab...Success -> active implementation Hyperslab
Activating thorn CartGrid3D...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn CoordGauge...Success -> active implementation CoordGauge
Activating thorn CosmoLapse...Success -> active implementation CosmoLapse
Activating thorn CycleClock...Success -> active implementation CycleClock
Activating thorn EOS_Base...Success -> active implementation EOS_Base
Activating thorn EOS_Omni...Success -> active implementation EOS_Omni
Activating thorn EOS_Polytrope...Success -> active implementation EOS_2d_Polytrope
Activating thorn GenericFD...Success -> active implementation GenericFD
Activating thorn GRHydro...Success -> active implementation GRHydro
Activating thorn HDF5...Success -> active implementation HDF5
Activating thorn hwloc...Success -> active implementation hwloc
Activating thorn HydroBase...Success -> active implementation HydroBase
Activating thorn ICPertFLRW_GRH...Success -> active implementation ICPertFLRW_GRH
Activating thorn InitBase...Success -> active implementation InitBase
Activating thorn IOUtil...Success -> active implementation IO
Activating thorn LocalReduce...Success -> active implementation LocalReduce
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn ML_BSSN...Success -> active implementation ML_BSSN
Activating thorn ML_BSSN_Helper...Success -> active implementation ML_BSSN_Helper
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn MPI...Success -> active implementation MPI
Activating thorn NaNChecker...Success -> active implementation NaNChecker
Activating thorn PeriodicCarpet...Success -> active implementation PeriodicCarpet
Activating thorn Slab...Success -> active implementation Slab
Activating thorn SpaceMask...Success -> active implementation SpaceMask
Activating thorn StaticConformal...Success -> active implementation StaticConformal
Activating thorn SymBase...Success -> active implementation SymBase
Activating thorn Time...Success -> active implementation time
Activating thorn Timers...Success -> active implementation Timers
Activating thorn TmunuBase...Success -> active implementation TmunuBase
Activating thorn Vectors...Success -> active implementation Vectors
Activating thorn zlib...Success -> active implementation zlib
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
      Carpet::MultiModel_Startup: Multi-model Startup routine
      CycleClock::CycleClock_Setup: Set up CycleClock
      LoopControl::lc_setup: Set up LoopControl
      ML_BSSN_Helper::ML_BSSN_SetGroupTags: [meta] Set checkpointing and prolongation group tags
      Timers::Timer_Startup: Prepare hierarchical timers
      Carpet::Driver_Startup: Startup routine
      IOUtil::IOUtil_Startup: Startup routine
      CarpetInterp::CarpetInterpStartup: Startup routine
      CarpetReduce::CarpetReduceStartup: Startup routine
      CartGrid3D::SymmetryStartup: Register GH Extension for GridSymmetry
      CoordBase::CoordBase_Startup: Register a GH extension to store the coordinate system handles
      CosmoLapse::CosmoLapse_Startup: [meta] create banner
      AEILocalInterp::AEILocalInterp_U_Startup: register CCTK_InterpLocalUniform() interpolation operators
      EOS_Polytrope::EOS_Polytrope_Startup: Setup the polytropic EOS
      GRHydro::GRHydro_RegisterMask: Register the hydro masks
      HydroBase::HydroBase_StartUp: Startup banner
      CarpetIOASCII::CarpetIOASCIIStartup: [global] Startup routine
      LocalReduce::LocalReduce_Startup: Startup routine
      CarpetIOBasic::CarpetIOBasicStartup: [global] Startup routine
      ML_BSSN::ML_BSSN_Startup: [meta] create banner
      ML_BSSN_Helper::ML_BSSN_RegisterSlicing: [meta] Register slicing
      CarpetIOHDF5::CarpetIOHDF5_Startup: Startup routine
      MoL::MoL_Startup: Startup banner
      Slab::Slab_InitMPIDatatypes: Create MPI datatypes for complex variables in C
      SymBase::SymBase_Startup: Register GH Extension for SymBase
      CarpetIOScalar::CarpetIOScalarStartup: [global] Startup routine
      Vectors::Vectors_Startup: Print startup message
      GROUP hwloc_startup: hwloc startup group
        hwloc::hwloc_version: Output hwloc version

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
      ADMBase::Einstein_InitSymBound: [global] Set up GF symmetries
      Boundary::Boundary_RegisterBCs: [global] Register boundary conditions that this thorn provides
      CarpetRegrid2::CarpetRegrid2_Initialise: [global] Initialise locations of refined regions
      CartGrid3D::RegisterCartGrid3DCoords: [meta] Register coordinates for the Cartesian grid
      CoordGauge::Einstein_ActivateSlicing: Initialize slicing, setup priorities for mixed slicings
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      EOS_Omni::EOS_Omni_Startup: [global] Set up conversion factors and other fun stuff
      GRHydro::GRHydro_Startup: Startup banner
      GRHydro::GRHydro_ClearLastMoLPostStep: [global] Initialize InLastMoLPostStep to zero
      ML_BSSN_Helper::ML_BSSN_ParamCompat: [meta] Handle parameter backward compatibility
      MoL::MoL_SetupIndexArrays: Set up the MoL bookkeeping index arrays
      MoL::MoL_SetScheduleStatus: [global] Set the flag so it is ok to register with MoL
      TmunuBase::TmunuBase_SetStressEnergyState: [global] Set the stress_energy_state variable
      GROUP MoL_Register: The group where physics thorns register variables with MoL
        CosmoLapse::CosmoLapse_RegisterVars: [meta] Register Variables for MoL
        GRHydro::GRHydro_Register: Register variables for MoL
        ML_BSSN::ML_BSSN_RegisterVars: [meta] Register Variables for MoL
        ML_BSSN_Helper::ML_BSSN_RegisterConstrained: [meta] Register ADMBase variables as constrained
      Slab::Slab_InitTimers: Initialise timers
      SpaceMask::MaskSym: [global] Set grid symmetries for mask
      SpaceMask::MaskSym_emask: [global] Set grid symmetries for emask (compatibility mode)
      GROUP SymBase_Wrapper: Wrapper group for SymBase
        GROUP SymmetryRegister: Register your symmetries here
          CartGrid3D::CartGrid3D_RegisterSymmetryBoundaries: [meta] Register symmetry boundaries
          CosmoLapse::CosmoLapse_RegisterSymmetries: [meta] register symmetries
          ML_BSSN::ML_BSSN_RegisterSymmetries: [meta] register symmetries
          PeriodicCarpet::PeriodicCarpet_RegisterBC: Register periodic boundary conditions
        SymBase::SymBase_Statistics: Print symmetry boundary face descriptions
      MoL::MoL_ReportNumberVariables: [meta] Report how many of each type of variable there are
  Parameter checking routines
    [CCTK_PARAMCHECK]
      ADMBase::ADMBase_ParamCheck: [global] Check consistency of parameters
      Boundary::Boundary_Check: Check dimension of grid variables
      Carpet::CarpetParamCheck: Parameter checking routine
      CarpetLib::CarpetLib_test_prolongate_3d_rf2: [global] Test prolongation operators
      CarpetRegrid2::CarpetRegrid2_ParamCheck: Check parameters
      CartGrid3D::ParamCheck_CartGrid3D: Check coordinates for CartGrid3D
      GRHydro::GRHydro_ParamCheck: Check parameters
      ML_BSSN_Helper::ML_BSSN_ParamCheck: [meta] Check parameters
      MoL::MoL_ParamCheck: Basic parameter checking
      PeriodicCarpet::PeriodicCarpet_ParamCheck: [level] Register periodic boundary conditions
      Vectors::Vectors_Test: Run correctness tests.

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
      [CCTK_PREREGRIDINITIAL]
      Set up grid hierarchy
      [CCTK_POSTREGRIDINITIAL]
        CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        SpaceMask::MaskZero: Initialise mask to zero
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
          HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
            ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
            GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
            ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
            GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        SpaceMask::MaskOne: Set mask to one
        GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        CosmoLapse::CosmoLapse_CheckBoundaries: [meta] check boundaries treatment
        GRHydro::GRHydro_Reset_Execution_Flags: [global] Initially set execution flags to 'YEAH, Execute'!
        GRHydro::GRHydro_InitSymBound: Schedule symmetries and check shift state
        GRHydro::reset_GRHydro_C2P_failed: Initialise the mask function that contains the points where C2P has failed (at BASEGRID)
        ICPertFLRW_GRH::ICPertFLRW_GRH_DeltaT: Define dtfac
        ML_BSSN::ML_BSSN_CheckBoundaries: [meta] check boundaries treatment
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        SpaceMask::MaskZero: Initialise mask to zero
        SpaceMask::MaskOne: Set old style mask to one
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
      [CCTK_INITIAL]
        StaticConformal::StaticConformal_InitialiseState: Set the conformal_state variable to 0
        GROUP ADMBase_InitialData: Schedule group for calculating ADM initial data
        GRHydro::GRHydro_EOSHandle: [global] Set the EOS number
        CarpetIOASCII::CarpetIOASCIIInit: [global] Initialisation routine
        CarpetIOBasic::CarpetIOBasicInit: [global] Initialisation routine
        CarpetIOHDF5::CarpetIOHDF5_Init: [global] Initialisation routine
        CarpetIOScalar::CarpetIOScalarInit: [global] Initialisation routine
        GRHydro::GRHydro_Rho_Minima_Setup: Set up minimum for the rest-mass density in the atmosphere (before intial data)
        GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GROUP ADMBase_InitialGauge: Schedule group for the ADM initial gauge condition
          ADMBase::ADMBase_LapseOne: Set the lapse to 1 at all points
          ADMBase::ADMBase_ShiftZero: Set the shift to 0 at all points
          ADMBase::ADMBase_DtLapseZero: Set the dtlapse to 0 at all points
          ADMBase::ADMBase_DtShiftZero: Set the dtshift to 0 at all points
        GROUP HydroBase_Initial: HydroBase initial data group
          GROUP GRHydro_Initial: GRHydro initial data group
          GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
            HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
          ICPertFLRW_GRH::ICPertFLRW_GRH_ICCalc: Initial conditions for perturbed FLRW
          ICPertFLRW_GRH::ICPertFLRW_GRH_TimelevelCopy: Copy data to all timelevels
        GROUP ADMBase_PostInitial: Schedule group for modifying the ADM initial data, such as e.g. adding noise
        GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
        ML_BSSN::ML_BSSN_InitialADMBase1Everywhere: ML_BSSN_InitialADMBase1Everywhere
        GRHydro::GRHydro_InitialAtmosphereReset: Use mask to enforce atmosphere at initial time
        CosmoLapse::CosmoLapse_InitialTau: CosmoLapse_InitialTau
        ML_BSSN::ML_BSSN_InitialADMBase2Interior: ML_BSSN_InitialADMBase2Interior
        ML_BSSN::ML_BSSN_InitialADMBase2BoundaryScalar: ML_BSSN_InitialADMBase2BoundaryScalar
        MoL::MoL_StartLoop: [level] Initialise the step size control
        GROUP HydroBase_Prim2ConInitial: Recover the conservative variables from the primitive variables
          GRHydro::Primitive2ConservativePolyCells: Convert initial data given in primive variables to conserved variables
        GROUP SetTmunu: Calculate the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
      [CCTK_POSTINITIAL]
        CarpetIOHDF5::CarpetIOHDF5_CloseFiles: [global] Close all filereader input files
        GRHydro::GRHydro_Scalar_Setup: Set up and check scalars for efficiency
        GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
          ML_BSSN::ML_BSSN_EnforceEverywhere: ML_BSSN_EnforceEverywhere
        GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
          ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
          ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
          CosmoLapse::CosmoLapse_SelectBoundConds: [level] select boundary conditions
          GROUP CosmoLapse_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
          GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
          CosmoLapse::CosmoLapse_dtLapsePostStep: CosmoLapse_dtLapsePostStep
          CosmoLapse::CosmoLapse_dtShiftPostStep: CosmoLapse_dtShiftPostStep
          CosmoLapse::CosmoLapse_dtShiftPostStepBoundary: CosmoLapse_dtShiftPostStepBoundary
          CosmoLapse::CosmoLapse_dtLapsePostStepBoundary: CosmoLapse_dtLapsePostStepBoundary
          ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP GRHydro_PostStep: Post step tasks for GRHydro
            GROUP GRHydro_AtmosphereMaskBoundaries: Apply boundary conditions to primitives
              GRHydro::GRHydro_SelectAtmosphereMaskBoundaries: [level] Select atmosphere mask for boundary conditions
              GROUP GRHydro_ApplyAtmosphereMaskBCs: Apply boundary conditions to real-valued atmosphere mask
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GRHydro::GRHydroPostSyncAtmosphereMask: Set integer atmosphere mask from synchronized real atmosphere mask
            if (GRHydro::InLastMoLPostStep)
              GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                if (GRHydro::execute_MoL_PostStep)
                  GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
              if (GRHydro::execute_MoL_Step)
                GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
              if (GRHydro::execute_MoL_PostStep)
                GRHydro::Con2Prim: Convert back to primitive variables (polytype)
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
        GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP ML_BSSN_ConstraintsEverywhere_group: ML_BSSN_ConstraintsEverywhere
            ML_BSSN::ML_BSSN_ConstraintsEverywhere: ML_BSSN_ConstraintsEverywhere
            GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
              ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
              GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ConstraintsInterior_group: ML_BSSN_ConstraintsInterior
            ML_BSSN::ML_BSSN_ConstraintsInterior: ML_BSSN_ConstraintsInterior
            GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
              ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
              GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
        GROUP MoL_PostStep: Ensure that everything is correct after restriction
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
          ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
          ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
          CosmoLapse::CosmoLapse_SelectBoundConds: [level] select boundary conditions
          GROUP CosmoLapse_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
          GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
          CosmoLapse::CosmoLapse_dtLapsePostStep: CosmoLapse_dtLapsePostStep
          CosmoLapse::CosmoLapse_dtShiftPostStep: CosmoLapse_dtShiftPostStep
          CosmoLapse::CosmoLapse_dtShiftPostStepBoundary: CosmoLapse_dtShiftPostStepBoundary
          CosmoLapse::CosmoLapse_dtLapsePostStepBoundary: CosmoLapse_dtLapsePostStepBoundary
          ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP GRHydro_PostStep: Post step tasks for GRHydro
            GROUP GRHydro_AtmosphereMaskBoundaries: Apply boundary conditions to primitives
              GRHydro::GRHydro_SelectAtmosphereMaskBoundaries: [level] Select atmosphere mask for boundary conditions
              GROUP GRHydro_ApplyAtmosphereMaskBCs: Apply boundary conditions to real-valued atmosphere mask
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GRHydro::GRHydroPostSyncAtmosphereMask: Set integer atmosphere mask from synchronized real atmosphere mask
            if (GRHydro::InLastMoLPostStep)
              GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                if (GRHydro::execute_MoL_PostStep)
                  GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
              if (GRHydro::execute_MoL_Step)
                GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
              if (GRHydro::execute_MoL_PostStep)
                GRHydro::Con2Prim: Convert back to primitive variables (polytype)
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
        GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
          GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
            ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
            GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
            ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
            GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
      [CCTK_POSTPOSTINITIAL]
        GRHydro::GRHydro_Rho_Minima_Setup_Final: Set the value of the rest-mass density of the atmosphere which will be used during the evolution
        GRHydro::GRHydro_InitialAtmosphereReset: Use mask to enforce atmosphere at initial time
        GROUP Con2Prim: Convert from conservative to primitive variables (might be redundant)
          if (GRHydro::execute_MoL_Step)
            GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
          if (GRHydro::execute_MoL_PostStep)
            GRHydro::Con2Prim: Convert back to primitive variables (polytype)
        GROUP SetTmunu: Calculate the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
        GROUP ADMConstraintsGroup: Evaluate ADM constraints, and perform symmetry boundary conditions
      [CCTK_POSTSTEP]
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level (for the check of the C2P mask)
        GRHydro::check_GRHydro_C2P_failed: Check the mask function that contains the points where C2P has failed and report an error in case a failure is found
        GROUP HydroBase_ExcisionHasBeenSet: Group to schedule thorns changing the mask before and thorns using the mask after
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
        SpaceMask::CheckMask: Ensure that all mask values are legal
    endif
    if (recover initial data)
      [CCTK_BASEGRID]
        ADMBase::ADMBase_SetShiftStateOn: Set the shift_state variable to 1
        ADMBase::ADMBase_SetDtLapseStateOn: Set the dtlapse_state variable to 1
        ADMBase::ADMBase_SetDtShiftStateOn: Set the dtshift_state variable to 1
        ADMMacros::ADMMacros_SetLocalSpatialOrder: Initialize the local_spatial_order
        CartGrid3D::SpatialSpacings: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
        CartGrid3D::SpatialCoordinates: Set up spatial 3D Cartesian coordinates on the GH
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        CosmoLapse::CosmoLapse_CheckBoundaries: [meta] check boundaries treatment
        GRHydro::GRHydro_Reset_Execution_Flags: [global] Initially set execution flags to 'YEAH, Execute'!
        GRHydro::GRHydro_InitSymBound: Schedule symmetries and check shift state
        GRHydro::reset_GRHydro_C2P_failed: Initialise the mask function that contains the points where C2P has failed (at BASEGRID)
        ICPertFLRW_GRH::ICPertFLRW_GRH_DeltaT: Define dtfac
        ML_BSSN::ML_BSSN_CheckBoundaries: [meta] check boundaries treatment
        NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
        SpaceMask::MaskZero: Initialise mask to zero
        SpaceMask::MaskOne: Set old style mask to one
        SymBase::SymBase_Check: Check whether the driver set up the grid consistently
        Time::Time_Initialise: [global] Initialise Time variables
        Time::TemporalSpacings: [singlemap] Set timestep based on Courant condition (courant_static)
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
        CarpetIOHDF5::CarpetIOHDF5_InitCheckpointingIntervals: [global] Initialisation of checkpointing intervals after recovery
        GROUP MaskBase_SetupMask: Set up the weight function
          GROUP MaskBase_SetupMaskAll: Set up the weight function
            CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
            CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
            GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
              CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
              CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
            GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
            GROUP SetupMask: Set up the real weight function (schedule other routines in here)
            CarpetReduce::MaskBase_TestMask: [global] Test the weight function
        GRHydro::GRHydro_EOSHandle: [global] Set the EOS number
        GRHydro::GRHydroCopyIntegerMask: Initialize the real valued atmosphere mask after checkpoint recovery
        GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
        GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
          HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
        GROUP MoL_PostStep: Ensure that everything is correct after recovery
          ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
          GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
          GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
          ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
          ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
          CosmoLapse::CosmoLapse_SelectBoundConds: [level] select boundary conditions
          GROUP CosmoLapse_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
          GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
          CosmoLapse::CosmoLapse_dtLapsePostStep: CosmoLapse_dtLapsePostStep
          CosmoLapse::CosmoLapse_dtShiftPostStep: CosmoLapse_dtShiftPostStep
          CosmoLapse::CosmoLapse_dtShiftPostStepBoundary: CosmoLapse_dtShiftPostStepBoundary
          CosmoLapse::CosmoLapse_dtLapsePostStepBoundary: CosmoLapse_dtLapsePostStepBoundary
          ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
          GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
          GROUP HydroBase_PostStep: Post step tasks for hydro thorns
            GROUP GRHydro_PostStep: Post step tasks for GRHydro
            GROUP GRHydro_AtmosphereMaskBoundaries: Apply boundary conditions to primitives
              GRHydro::GRHydro_SelectAtmosphereMaskBoundaries: [level] Select atmosphere mask for boundary conditions
              GROUP GRHydro_ApplyAtmosphereMaskBCs: Apply boundary conditions to real-valued atmosphere mask
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GRHydro::GRHydroPostSyncAtmosphereMask: Set integer atmosphere mask from synchronized real atmosphere mask
            if (GRHydro::InLastMoLPostStep)
              GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
            GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
              GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
              GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                if (GRHydro::execute_MoL_PostStep)
                  GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
              GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                GROUP BoundaryConditions: Execute all boundary conditions
                  Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                  CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                  PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
                Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
            GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
              if (GRHydro::execute_MoL_Step)
                GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
              if (GRHydro::execute_MoL_PostStep)
                GRHydro::Con2Prim: Convert back to primitive variables (polytype)
          GROUP SetTmunu: Group for calculating the stress-energy tensor
            TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
            GROUP AddToTmunu: Add to the stress-energy tensor here
              GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
        GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
          NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
          NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
        CarpetIOHDF5::CarpetIOHDF5_InitialDataCheckpoint: [meta] Initial data checkpoint routine
    endif
    if (analysis)
      [CCTK_ANALYSIS]
        CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
        CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
        CosmoLapse::CosmoLapse_InitRHSTau: CosmoLapse_InitRHSTau
        LoopControl::lc_statistics_analysis: [meta] Output LoopControl statistics
        GROUP ML_BSSN_EvolutionAnalysis: Calculate RHS at analysis
          ML_BSSN::ML_BSSN_EvolutionAnalysisInit: ML_BSSN_EvolutionAnalysisInit
          ML_BSSN::ML_BSSN_EvolutionAnalysisInterior: ML_BSSN_EvolutionAnalysisInterior
  endif
  Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    Change grid hierarchy
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      SpaceMask::MaskZero: Initialise mask to zero
      GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
        HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
      SpaceMask::MaskOne: Set mask to one
      GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
        ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
        ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
        CosmoLapse::CosmoLapse_SelectBoundConds: [level] select boundary conditions
        GROUP CosmoLapse_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
        CosmoLapse::CosmoLapse_dtLapsePostStep: CosmoLapse_dtLapsePostStep
        CosmoLapse::CosmoLapse_dtShiftPostStep: CosmoLapse_dtShiftPostStep
        CosmoLapse::CosmoLapse_dtShiftPostStepBoundary: CosmoLapse_dtShiftPostStepBoundary
        CosmoLapse::CosmoLapse_dtLapsePostStepBoundary: CosmoLapse_dtLapsePostStepBoundary
        ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
        GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP GRHydro_PostStep: Post step tasks for GRHydro
          GROUP GRHydro_AtmosphereMaskBoundaries: Apply boundary conditions to primitives
            GRHydro::GRHydro_SelectAtmosphereMaskBoundaries: [level] Select atmosphere mask for boundary conditions
            GROUP GRHydro_ApplyAtmosphereMaskBCs: Apply boundary conditions to real-valued atmosphere mask
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GRHydro::GRHydroPostSyncAtmosphereMask: Set integer atmosphere mask from synchronized real atmosphere mask
          if (GRHydro::InLastMoLPostStep)
            GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              if (GRHydro::execute_MoL_PostStep)
                GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
            if (GRHydro::execute_MoL_Step)
              GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
            if (GRHydro::execute_MoL_PostStep)
              GRHydro::Con2Prim: Convert back to primitive variables (polytype)
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
          ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
          GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
          ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
          GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
      CoordGauge::Einstein_SetNextSlicing: Identify the slicing for the next iteration
      GRHydro::reset_GRHydro_C2P_failed: Reset the mask function that contains the points where C2P has failed (at PRESTEP)
      LoopControl::lc_steer: [meta] Update LoopControl algorithm preferences
      NaNChecker::NaNChecker_ResetCounter: [global] Reset the NaNChecker::NaNsFound counter
    [CCTK_EVOL]
      MoL::MoL_StartLoop: [level] Initialise the step size control
      while (MoL::MoL_Stepsize_Bad)
        GROUP MoL_Evolution: A single Cactus evolution step using MoL
          GROUP MoL_StartStep: MoL internal setup for the evolution step
            MoL::MoL_SetCounter: [level] Set the counter for the ODE method to loop over
            MoL::MoL_SetTime: [level] Ensure the correct time and timestep are used
            MoL::MoL_AllocateScratchSpace: [level] Allocate storage for scratch levels
          GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
            GRHydro::GRHydro_Scalar_Setup: Set up and check scalars for efficiency
          MoL::MoL_AllocateScratch: Allocate sufficient space for array scratch variables
          MoL::MoL_InitialCopy: Ensure the data is in the correct timelevel
          while (MoL::MoL_Intermediate_Step)
            GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
              MoL::MoL_InitRHS: Initialise the RHS functions
              GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
                CosmoLapse::CosmoLapse_RHSTau: CosmoLapse_RHSTau
                GROUP HydroBase_RHS: Groups for scheduling tasks for calculating RHS of hydro variables
                  if (GRHydro::execute_MoL_Step)
                    GROUP GRHydroRHS: Calculate the update terms
                      GRHydro::SourceTerms: Source term calculation
                      GRHydro::GRHydroStartLoop: [level] Set the flux_direction variable
                      while (GRHydro::flux_direction)
                        GROUP FluxTerms: Calculation of intercell fluxes
                          GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
                          GRHydro::Reconstruct: Reconstruct the functions at the cell boundaries
                          GRHydro::Riemann: Solve the local Riemann problems
                          GRHydro::UpdateCalcul: Calculate the update term from the fluxes
                          GRHydro::GRHydroAdvanceLoop: [level] Decrement the flux_direction variable
                      end while
                      GRHydro::GRHydroUpdateAtmosphereMask: Alter the update terms if inside the atmosphere region
                ML_BSSN::ML_BSSN_EvolutionBoundaryScalar: ML_BSSN_EvolutionBoundaryScalar
                GROUP ML_BSSN_EvolutionInteriorSplitBy: 
                  ML_BSSN::ML_BSSN_EvolutionInteriorSplitBy1: ML_BSSN_EvolutionInteriorSplitBy1
                  ML_BSSN::ML_BSSN_EvolutionInteriorSplitBy2: ML_BSSN_EvolutionInteriorSplitBy2
                  ML_BSSN::ML_BSSN_EvolutionInteriorSplitBy3: ML_BSSN_EvolutionInteriorSplitBy3
              GROUP MoL_PostRHS: Modify RHS functions
                CosmoLapse::CosmoLapse_dtLapsePostRHS: CosmoLapse_dtLapsePostRHS
                CosmoLapse::CosmoLapse_dtLapsePostRHSBoundary: CosmoLapse_dtLapsePostRHSBoundary
                CosmoLapse::CosmoLapse_dtShiftPostRHS: CosmoLapse_dtShiftPostRHS
                CosmoLapse::CosmoLapse_dtShiftPostRHSBoundary: CosmoLapse_dtShiftPostRHSBoundary
              GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
              MoL::MoL_Add: Updates calculated with the efficient Runge-Kutta 4 method
              MoL::MoL_DecrementCounter: [level] Alter the counter number
              MoL::MoL_ResetTime: [level] If necessary, change the time
              GROUP MoL_PostStepModify: The group for physics thorns to schedule enforcing constraints
                ML_BSSN::ML_BSSN_EnforceEverywhere: ML_BSSN_EnforceEverywhere
              GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
                ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
                GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
                GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
                ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
                ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
                CosmoLapse::CosmoLapse_SelectBoundConds: [level] select boundary conditions
                GROUP CosmoLapse_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
                GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
                CosmoLapse::CosmoLapse_dtLapsePostStep: CosmoLapse_dtLapsePostStep
                CosmoLapse::CosmoLapse_dtShiftPostStep: CosmoLapse_dtShiftPostStep
                CosmoLapse::CosmoLapse_dtShiftPostStepBoundary: CosmoLapse_dtShiftPostStepBoundary
                CosmoLapse::CosmoLapse_dtLapsePostStepBoundary: CosmoLapse_dtLapsePostStepBoundary
                ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
                GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
                  GROUP BoundaryConditions: Execute all boundary conditions
                    Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                    CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                    PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
                  Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
                GROUP HydroBase_PostStep: Post step tasks for hydro thorns
                  GROUP GRHydro_PostStep: Post step tasks for GRHydro
                  GROUP GRHydro_AtmosphereMaskBoundaries: Apply boundary conditions to primitives
                    GRHydro::GRHydro_SelectAtmosphereMaskBoundaries: [level] Select atmosphere mask for boundary conditions
                    GROUP GRHydro_ApplyAtmosphereMaskBCs: Apply boundary conditions to real-valued atmosphere mask
                      GROUP BoundaryConditions: Execute all boundary conditions
                        Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                        CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                        PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
                      Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                  GRHydro::GRHydroPostSyncAtmosphereMask: Set integer atmosphere mask from synchronized real atmosphere mask
                  if (GRHydro::InLastMoLPostStep)
                    GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
                  GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
                    GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
                    GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
                      if (GRHydro::execute_MoL_PostStep)
                        GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
                    GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                      GROUP BoundaryConditions: Execute all boundary conditions
                        Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                        CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                        PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
                      Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
                  GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
                    if (GRHydro::execute_MoL_Step)
                      GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
                    if (GRHydro::execute_MoL_PostStep)
                      GRHydro::Con2Prim: Convert back to primitive variables (polytype)
                GROUP SetTmunu: Group for calculating the stress-energy tensor
                  TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
                  GROUP AddToTmunu: Add to the stress-energy tensor here
                    GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
              GRHydro::GRHydro_ClearLastMoLPostStep: [level] Reset InLastMoLPostStep to zero
              MoL::MoL_ResetDeltaTime: [level] If necessary, change the timestep
          end while
          MoL::MoL_FinishLoop: [level] Control the step size
          MoL::MoL_RestoreSandR: Restoring the Save and Restore variables to the original state
          MoL::MoL_FreeScratchSpace: [level] Free storage for scratch levels
      end while
      GRHydro::sync_GRHydro_C2P_failed: Syncronise the mask function that contains the points where C2P has failed
      GROUP MoL_PseudoEvolution: Calculate pseudo-evolved quantities
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP ML_BSSN_ConstraintsEverywhere_group: ML_BSSN_ConstraintsEverywhere
          ML_BSSN::ML_BSSN_ConstraintsEverywhere: ML_BSSN_ConstraintsEverywhere
          GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
            ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
            GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsInterior_group: ML_BSSN_ConstraintsInterior
          ML_BSSN::ML_BSSN_ConstraintsInterior: ML_BSSN_ConstraintsInterior
          GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
            ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
            GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    Evolve finer grids recursively
    Restrict from finer grids
    [CCTK_POSTRESTRICT]
      GROUP MoL_PostStep: Ensure that everything is correct after restriction
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
        ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
        ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
        CosmoLapse::CosmoLapse_SelectBoundConds: [level] select boundary conditions
        GROUP CosmoLapse_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
        CosmoLapse::CosmoLapse_dtLapsePostStep: CosmoLapse_dtLapsePostStep
        CosmoLapse::CosmoLapse_dtShiftPostStep: CosmoLapse_dtShiftPostStep
        CosmoLapse::CosmoLapse_dtShiftPostStepBoundary: CosmoLapse_dtShiftPostStepBoundary
        CosmoLapse::CosmoLapse_dtLapsePostStepBoundary: CosmoLapse_dtLapsePostStepBoundary
        ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
        GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP GRHydro_PostStep: Post step tasks for GRHydro
          GROUP GRHydro_AtmosphereMaskBoundaries: Apply boundary conditions to primitives
            GRHydro::GRHydro_SelectAtmosphereMaskBoundaries: [level] Select atmosphere mask for boundary conditions
            GROUP GRHydro_ApplyAtmosphereMaskBCs: Apply boundary conditions to real-valued atmosphere mask
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GRHydro::GRHydroPostSyncAtmosphereMask: Set integer atmosphere mask from synchronized real atmosphere mask
          if (GRHydro::InLastMoLPostStep)
            GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              if (GRHydro::execute_MoL_PostStep)
                GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
            if (GRHydro::execute_MoL_Step)
              GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
            if (GRHydro::execute_MoL_PostStep)
              GRHydro::Con2Prim: Convert back to primitive variables (polytype)
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
          ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
          GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
          ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
          GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
    [CCTK_POSTSTEP]
      GRHydro::GRHydro_RefinementLevel: Calculate current refinement level (for the check of the C2P mask)
      GRHydro::check_GRHydro_C2P_failed: Check the mask function that contains the points where C2P has failed and report an error in case a failure is found
      GROUP HydroBase_ExcisionHasBeenSet: Group to schedule thorns changing the mask before and thorns using the mask after
      GROUP zzz_NaNChecker_NaNCheck: Check for NaNs and count them in NaNChecker::NaNsFound
        NaNChecker::NaNChecker_NaNCheck_Prepare: [level] Prepare data structures to check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Check: [local] Check for NaNs
        NaNChecker::NaNChecker_NaNCheck_Finish: [level] Count NaNs in NaNChecker::NaNsFound
      NaNChecker::NaNChecker_TakeAction: [global] [loop-level] Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found
      SpaceMask::CheckMask: Ensure that all mask values are legal
    if (checkpoint)
      [CCTK_CHECKPOINT]
      CarpetIOHDF5::CarpetIOHDF5_EvolutionCheckpoint: [meta] Evolution checkpoint routine
    endif
    if (analysis)
      [CCTK_ANALYSIS]
      CarpetLib::CarpetLib_printtimestats: [global] Print timing statistics if desired
      CarpetLib::CarpetLib_printmemstats: [global] Print memory statistics if desired
      CosmoLapse::CosmoLapse_InitRHSTau: CosmoLapse_InitRHSTau
      LoopControl::lc_statistics_analysis: [meta] Output LoopControl statistics
      GROUP ML_BSSN_EvolutionAnalysis: Calculate RHS at analysis
        ML_BSSN::ML_BSSN_EvolutionAnalysisInit: ML_BSSN_EvolutionAnalysisInit
        ML_BSSN::ML_BSSN_EvolutionAnalysisInterior: ML_BSSN_EvolutionAnalysisInterior
    endif
    Output grid variables
    enddo

  Termination routines
    [CCTK_TERMINATE]
      CarpetIOHDF5::CarpetIOHDF5_TerminationCheckpoint: [meta] Termination checkpoint routine
      LoopControl::lc_statistics_terminate: [meta] Output LoopControl statistics
      MoL::MoL_FreeIndexArrays: Free the MoL bookkeeping index arrays

  Shutdown routines
    [CCTK_SHUTDOWN]
      Timers::Timer_Shutdown: Prepare hierarchical timers

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
      CartGrid3D::SpatialCoordinates: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        GROUP MaskBase_SetupMaskAll: Set up the weight function
          CarpetReduce::MaskBase_AllocateMask: [global] Allocate the weight function
          CarpetReduce::MaskBase_InitMask: [global] [loop-local] Initialise the weight function
          GROUP SetupIMaskInternal: Set up the integer weight function (schedule other routines in here)
            CarpetReduce::CoordBase_SetupMask: [global] [loop-local] Set up the outer boundaries of the weight function
            CarpetReduce::CarpetMaskSetup: [global] [loop-singlemap] Set up the weight function for the restriction regions
          GROUP SetupIMask: Set up the integer weight function (schedule other routines in here)
          CarpetReduce::MaskBase_SetMask: [global] [loop-local] Set the weight function
          GROUP SetupMask: Set up the real weight function (schedule other routines in here)
          CarpetReduce::MaskBase_TestMask: [global] Test the weight function
      SpaceMask::MaskZero: Initialise mask to zero
      GROUP HydroBase_ExcisionMaskSetup: Set up hydro excision mask
        HydroBase::HydroBase_InitExcisionMask: Initialize hydro excision mask to 'no excision everywhere'
      SpaceMask::MaskOne: Set mask to one
      GRHydro::GRHydro_SetupMask: Initialize the atmosphere mask
      GROUP MoL_PostStep: Ensure that everything is correct after regridding
        ADMBase::ADMBase_Boundaries: [level] Select ADMBase boundary conditions - may be required for mesh refinement
        GROUP ADMBase_ApplyBCs: Apply the boundary conditions of ADMBase
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_SelectBoundConds: [level] select boundary conditions
        GROUP ML_BSSN_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        ML_BSSN::ML_BSSN_ADMBaseInterior: ML_BSSN_ADMBaseInterior
        ML_BSSN::ML_BSSN_ADMBaseEverywhere: ML_BSSN_ADMBaseEverywhere
        ML_BSSN::ML_BSSN_ADMBaseBoundaryScalar: ML_BSSN_ADMBaseBoundaryScalar
        CosmoLapse::CosmoLapse_SelectBoundConds: [level] select boundary conditions
        GROUP CosmoLapse_ApplyBCs: Apply boundary conditions controlled by thorn Boundary
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GRHydro::GRHydro_RefinementLevel: Calculate current refinement level
        GRHydro::GRHydro_SetLastMoLPostStep: [level] Set grid scalar InLastMoLPostStep if this is the last MoL PostStep call
        CosmoLapse::CosmoLapse_dtLapsePostStep: CosmoLapse_dtLapsePostStep
        CosmoLapse::CosmoLapse_dtShiftPostStep: CosmoLapse_dtShiftPostStep
        CosmoLapse::CosmoLapse_dtShiftPostStepBoundary: CosmoLapse_dtShiftPostStepBoundary
        CosmoLapse::CosmoLapse_dtLapsePostStepBoundary: CosmoLapse_dtLapsePostStepBoundary
        ML_BSSN_Helper::ML_BSSN_ADMBase_SelectBCs: [level] Select boundary conditions for ADMBase variables
        GROUP ML_BSSN_ADMBase_ApplyBCs: Apply boundary conditions to ADMBase variables
          GROUP BoundaryConditions: Execute all boundary conditions
            Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
            CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
            PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
          Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ADMBase_SetADMVars: Set the ADM variables before this group, and use them afterwards
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP GRHydro_PostStep: Post step tasks for GRHydro
          GROUP GRHydro_AtmosphereMaskBoundaries: Apply boundary conditions to primitives
            GRHydro::GRHydro_SelectAtmosphereMaskBoundaries: [level] Select atmosphere mask for boundary conditions
            GROUP GRHydro_ApplyAtmosphereMaskBCs: Apply boundary conditions to real-valued atmosphere mask
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GRHydro::GRHydroPostSyncAtmosphereMask: Set integer atmosphere mask from synchronized real atmosphere mask
          if (GRHydro::InLastMoLPostStep)
            GRHydro::GRHydro_AtmosphereReset: Reset the atmosphere
          GROUP HydroBase_Boundaries: HydroBase-internal Boundary conditions group
            GROUP Do_GRHydro_Boundaries: GRHydro Boundary conditions group
            GROUP HydroBase_Select_Boundaries: Group to schedule the boundary condition functions
              if (GRHydro::execute_MoL_PostStep)
                GRHydro::GRHydro_Bound: [level] Select GRHydro boundary conditions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
                CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
                PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
              Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
            if (GRHydro::execute_MoL_Step)
              GRHydro::GRHydro_SqrtSpatialDeterminant: Calculate sdetg
            if (GRHydro::execute_MoL_PostStep)
              GRHydro::Con2Prim: Convert back to primitive variables (polytype)
        GROUP SetTmunu: Group for calculating the stress-energy tensor
          TmunuBase::TmunuBase_ZeroTmunu: Initialise the stress-energy tensor to zero
          GROUP AddToTmunu: Add to the stress-energy tensor here
            GRHydro::GRHydro_Tmunu: Compute the energy-momentum tensor
      GROUP MoL_PseudoEvolutionBoundaries: Apply boundary conditions to pseudo-evolved quantities
        GROUP ML_BSSN_ConstraintsEverywhere_bc_group: ML_BSSN_ConstraintsEverywhere
          ML_BSSN::ML_BSSN_ConstraintsEverywhere_SelectBCs: [level] ML_BSSN_ConstraintsEverywhere_SelectBCs
          GROUP ML_BSSN_ConstraintsEverywhere_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsEverywhere
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
        GROUP ML_BSSN_ConstraintsInterior_bc_group: ML_BSSN_ConstraintsInterior
          ML_BSSN::ML_BSSN_ConstraintsInterior_SelectBCs: [level] ML_BSSN_ConstraintsInterior_SelectBCs
          GROUP ML_BSSN_ConstraintsInterior_ApplyBCs: Apply BCs for groups set in ML_BSSN_ConstraintsInterior
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary::Boundary_ApplyPhysicalBCs: Apply all requested local physical boundary conditions
              CartGrid3D::CartGrid3D_ApplyBC: Apply symmetry boundary conditions
              PeriodicCarpet::PeriodicCarpet_ApplyBC: Apply periodic boundary conditions
            Boundary::Boundary_ClearSelection: [level] Unselect all grid variables for boundary conditions
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model process distribution:
   processes 0-5: model 0 "world"
INFO (Carpet): Multi-Model: This is process 0, model 0 "world"
Current core file size limit: hard=[unlimited], soft=0 MB
Current addres space size limit: hard=[unlimited], soft=[unlimited]
Current data segment size limit: hard=[unlimited], soft=[unlimited]
Current resident set size limit: hard=58125 MB, soft=58125 MB
INFO (CycleClock): Measuring CycleClock tick via OpenMP...
INFO (CycleClock): Calibrated CycleClock: 0.384606 ns per clock tick (2.60007 GHz)
INFO (Vectors): Using vector size 2 for architecture SSE2 (64-bit precision)
INFO (hwloc): library version 2.1.0, API version 0x20100
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
CosmoLapse
--------------------------------------------------------------------------------
HydroBase: Let it flow.
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------
ML_BSSN
--------------------------------------------------------------------------------
AMR HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 0D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 1D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 2D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
AMR 3D HDF5 I/O provided by CarpetIOHDF5
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------
AMR scalar I/O provided by CarpetIOScalar
--------------------------------------------------------------------------------

INFO (Carpet): MPI is enabled
INFO (Carpet): Carpet is running on 6 processes
INFO (Carpet): This is process 0
INFO (Carpet): OpenMP is enabled
INFO (Carpet): This process contains 8 threads, this is thread 0
INFO (Carpet): There are 48 threads in total
INFO (Carpet): There are 8 threads per process
INFO (Carpet): This process runs on host node177.pri.sciama3.alces.network, pid=9462
INFO (Carpet): This process runs on 8 cores: 0-7
INFO (Carpet): Thread 0 runs on 8 cores: 0-7
INFO (Carpet): Thread 1 runs on 8 cores: 0-7
INFO (Carpet): Thread 2 runs on 8 cores: 0-7
INFO (Carpet): Thread 3 runs on 8 cores: 0-7
INFO (Carpet): Thread 4 runs on 8 cores: 0-7
INFO (Carpet): Thread 5 runs on 8 cores: 0-7
INFO (Carpet): Thread 6 runs on 8 cores: 0-7
INFO (Carpet): Thread 7 runs on 8 cores: 0-7
INFO (Carpet): This simulation is running in 3 dimensions
INFO (Carpet): Boundary specification for map 0:
   nboundaryzones: [[3,3,3],[3,3,3]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[1,1,1],[0,0,0]]
INFO (Carpet): CoordBase domain specification for map 0:
   physical extent: [-603,-603,-603] : [603,603,603]   ([1206,1206,1206])
   interior extent: [-603,-603,-603] : [565.312,565.312,565.312]   ([1168.31,1168.31,1168.31])
   exterior extent: [-716.062,-716.062,-716.062] : [678.375,678.375,678.375]   ([1394.44,1394.44,1394.44])
   base_spacing   : [37.6875,37.6875,37.6875]
INFO (Carpet): Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [-603,-603,-603] : [603,603,603]   ([1206,1206,1206])
   interior extent   : [-603,-603,-603] : [565.312,565.312,565.312]   ([1168.31,1168.31,1168.31])
   exterior extent   : [-716.062,-716.062,-716.062] : [678.375,678.375,678.375]   ([1394.44,1394.44,1394.44])
   spacing           : [37.6875,37.6875,37.6875]
INFO (Carpet): Base grid specification for map 0:
   number of grid points             : [38,38,38]
   number of coarse grid ghost points: [[3,3,3],[3,3,3]]
INFO (Carpet): Buffer zone counts (excluding ghosts):
   [0]: [[0,0,0],[0,0,0]]
   [1]: [[9,9,9],[9,9,9]]
   [2]: [[9,9,9],[9,9,9]]
   [3]: [[9,9,9],[9,9,9]]
   [4]: [[9,9,9],[9,9,9]]
INFO (Carpet): Overlap zone counts:
   [0]: [[0,0,0],[0,0,0]]
   [1]: [[0,0,0],[0,0,0]]
   [2]: [[0,0,0],[0,0,0]]
   [3]: [[0,0,0],[0,0,0]]
   [4]: [[0,0,0],[0,0,0]]
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 1083 grid functions in 137 groups
INFO (Carpet):    There are 228 grid scalars in 60 groups
INFO (Carpet):    There are 100 1-dimensional grid arrays in 10 groups
INFO (Carpet):    There are 1 2-dimensional grid arrays in 1 groups
INFO (Carpet):    There are 0 3-dimensional grid arrays in 0 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5' registered: AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): Periodic AMR output requested for:
   ADMBASE::gxx
   ADMBASE::gxy
   ADMBASE::gxz
   ADMBASE::gyy
   ADMBASE::gyz
   ADMBASE::gzz
   ADMBASE::kxx
   ADMBASE::kxy
   ADMBASE::kxz
   ADMBASE::kyy
   ADMBASE::kyz
   ADMBASE::kzz
   ADMBASE::alp
   ADMBASE::betax
   ADMBASE::betay
   ADMBASE::betaz
   ADMBASE::dtalp
   ADMBASE::dtbetax
   ADMBASE::dtbetay
   ADMBASE::dtbetaz
   COSMOLAPSE::tau
   HYDROBASE::rho
   HYDROBASE::press
   HYDROBASE::eps
   HYDROBASE::vel[0]
   HYDROBASE::vel[1]
   HYDROBASE::vel[2]
   HYDROBASE::w_lorentz
   TMUNUBASE::eTtt
   TMUNUBASE::eTtx
   TMUNUBASE::eTty
   TMUNUBASE::eTtz
   TMUNUBASE::eTxx
   TMUNUBASE::eTxy
   TMUNUBASE::eTxz
   TMUNUBASE::eTyy
   TMUNUBASE::eTyz
   TMUNUBASE::eTzz
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_0D' registered: 0D AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_1D' registered: 1D AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_2D' registered: 2D AMR output of grid variables to HDF5 files
INFO (CarpetIOHDF5): I/O Method 'IOHDF5_3D' registered: 3D AMR output of grid variables to HDF5 files
INFO (CarpetIOScalar): Periodic scalar output requested for:
   ADMBASE::gxx
   ADMBASE::gxy
   ADMBASE::gxz
   ADMBASE::gyy
   ADMBASE::gyz
   ADMBASE::gzz
   ADMBASE::kxx
   ADMBASE::kxy
   ADMBASE::kxz
   ADMBASE::kyy
   ADMBASE::kyz
   ADMBASE::kzz
   ADMBASE::alp
   ADMBASE::betax
   ADMBASE::betay
   ADMBASE::betaz
   HYDROBASE::rho
   HYDROBASE::press
   ML_BSSN::H
   ML_BSSN::M1
   ML_BSSN::M2
   ML_BSSN::M3
INFO (CarpetRegrid2): Initialising position of centre 0 to [0,0,0]
INFO (MoL): Using Runge-Kutta 4 as the time integrator.
INFO (SymBase): Symmetry on lower x-face: periodic
INFO (SymBase): Symmetry on upper x-face: periodic
INFO (SymBase): Symmetry on lower y-face: periodic
INFO (SymBase): Symmetry on upper y-face: periodic
INFO (SymBase): Symmetry on lower z-face: periodic
INFO (SymBase): Symmetry on upper z-face: periodic
INFO (MoL): The maximum number of evolved variables is 673. 30 are registered.
INFO (MoL): The maximum number of slow evolved variables is 673. 0 are registered.
INFO (MoL): The maximum number of constrained variables is 673. 38 are registered.
INFO (MoL): The maximum number of SandR variables is 673. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 673. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 673. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 673. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (Vectors): Testing vectorisation... [errors may result in segfaults]
INFO (Vectors): 373/373 tests passed 
INFO (CarpetRegrid2): Centre 1 is at position [0,0,0] with 5 levels
INFO (CarpetRegrid2): Regridding level 0 map 0 at iteration 0 time 1
Refinement level 0: will not be changed
Refinement level 0: regions are bboxset<CCTK_INT4,3>(set<bbox>:{([0,0,0]:[592,592,592]:[16,16,16]/[0,0,0]:[37,37,37]/[38,38,38]/54872)},stride:[16,16,16],offset:[0,0,0])
Refinement level 1: importing refined region settings...
Determining domain outer boundary...
Refinement level 1: determining outer boundary...
Refinement level 1: physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 1: spacing is [18.84375,18.84375,18.84375]
Refinement level 1: exterior coordinate boundary is at [[-659.53125,-659.53125,-659.53125],[640.6875,640.6875,640.6875]]
Refinement level 1: stride is [8,8,8]
Refinement level 1: physical boundary is at [[48,48,48],[560,560,560]]
Refinement level 1: reconstructed physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 1: exterior boundary is at [[24,24,24],[576,576,576]]
Refinement level 1: reconstructed exterior coordinate boundary is at [[-659.53125,-659.53125,-659.53125],[640.6875,640.6875,640.6875]]
Centre 1 refinement level 1: coordinate region is ([-160,-160,-160]:[160,160,160])
Centre 1 refinement level 1: integer region is ([240,240,240]:[368,368,368])
Refinement level 1: preliminary regions are bboxset<CCTK_INT4,3>(set<bbox>:{([240,240,240]:[368,368,368]:[8,8,8]/[30,30,30]:[46,46,46]/[17,17,17]/4913)},stride:[8,8,8],offset:[0,0,0])
Refinement level 2: importing refined region settings...
Determining domain outer boundary...
Refinement level 2: determining outer boundary...
Refinement level 2: physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 2: spacing is [9.421875,9.421875,9.421875]
Refinement level 2: exterior coordinate boundary is at [[-631.265625,-631.265625,-631.265625],[621.84375,621.84375,621.84375]]
Refinement level 2: stride is [4,4,4]
Refinement level 2: physical boundary is at [[48,48,48],[560,560,560]]
Refinement level 2: reconstructed physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 2: exterior boundary is at [[36,36,36],[568,568,568]]
Refinement level 2: reconstructed exterior coordinate boundary is at [[-631.265625,-631.265625,-631.265625],[621.84375,621.84375,621.84375]]
Centre 1 refinement level 2: coordinate region is ([-80,-80,-80]:[80,80,80])
Centre 1 refinement level 2: integer region is ([272,272,272]:[336,336,336])
Refinement level 2: preliminary regions are bboxset<CCTK_INT4,3>(set<bbox>:{([272,272,272]:[336,336,336]:[4,4,4]/[68,68,68]:[84,84,84]/[17,17,17]/4913)},stride:[4,4,4],offset:[0,0,0])
Refinement level 3: importing refined region settings...
Determining domain outer boundary...
Refinement level 3: determining outer boundary...
Refinement level 3: physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 3: spacing is [4.7109375,4.7109375,4.7109375]
Refinement level 3: exterior coordinate boundary is at [[-617.1328125,-617.1328125,-617.1328125],[612.421875,612.421875,612.421875]]
Refinement level 3: stride is [2,2,2]
Refinement level 3: physical boundary is at [[48,48,48],[560,560,560]]
Refinement level 3: reconstructed physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 3: exterior boundary is at [[42,42,42],[564,564,564]]
Refinement level 3: reconstructed exterior coordinate boundary is at [[-617.1328125,-617.1328125,-617.1328125],[612.421875,612.421875,612.421875]]
Centre 1 refinement level 3: coordinate region is ([-40,-40,-40]:[40,40,40])
Centre 1 refinement level 3: integer region is ([288,288,288]:[320,320,320])
Refinement level 3: preliminary regions are bboxset<CCTK_INT4,3>(set<bbox>:{([288,288,288]:[320,320,320]:[2,2,2]/[144,144,144]:[160,160,160]/[17,17,17]/4913)},stride:[2,2,2],offset:[0,0,0])
Refinement level 4: importing refined region settings...
Determining domain outer boundary...
Refinement level 4: determining outer boundary...
Refinement level 4: physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 4: spacing is [2.35546875,2.35546875,2.35546875]
Refinement level 4: exterior coordinate boundary is at [[-610.06640625,-610.06640625,-610.06640625],[607.7109375,607.7109375,607.7109375]]
Refinement level 4: stride is [1,1,1]
Refinement level 4: physical boundary is at [[48,48,48],[560,560,560]]
Refinement level 4: reconstructed physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 4: exterior boundary is at [[45,45,45],[562,562,562]]
Refinement level 4: reconstructed exterior coordinate boundary is at [[-610.06640625,-610.06640625,-610.06640625],[607.7109375,607.7109375,607.7109375]]
Centre 1 refinement level 4: coordinate region is ([-20,-20,-20]:[20,20,20])
Centre 1 refinement level 4: integer region is ([296,296,296]:[312,312,312])
Refinement level 4: preliminary regions are bboxset<CCTK_INT4,3>(set<bbox>:{([296,296,296]:[312,312,312]:[1,1,1]/[296,296,296]:[312,312,312]/[17,17,17]/4913)},stride:[1,1,1],offset:[0,0,0])
Determining domain outer boundary...
Refinement level 4: determining outer boundary...
Refinement level 4: physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 4: spacing is [2.35546875,2.35546875,2.35546875]
Refinement level 4: exterior coordinate boundary is at [[-610.06640625,-610.06640625,-610.06640625],[607.7109375,607.7109375,607.7109375]]
Refinement level 4: stride is [1,1,1]
Refinement level 4: physical boundary is at [[48,48,48],[560,560,560]]
Refinement level 4: reconstructed physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 4: exterior boundary is at [[45,45,45],[562,562,562]]
Refinement level 4: reconstructed exterior coordinate boundary is at [[-610.06640625,-610.06640625,-610.06640625],[607.7109375,607.7109375,607.7109375]]
Refinement level 4:
   Original regions are bboxset<CCTK_INT4,3>(set<bbox>:{([296,296,296]:[312,312,312]:[1,1,1]/[296,296,296]:[312,312,312]/[17,17,17]/4913)},stride:[1,1,1],offset:[0,0,0])
Refinement level 4: adding buffer zones...
   New regions are bboxset<CCTK_INT4,3>(set<bbox>:{([287,287,287]:[321,321,321]:[1,1,1]/[287,287,287]:[321,321,321]/[35,35,35]/42875)},stride:[1,1,1],offset:[0,0,0])
INFO (CarpetRegrid2): Enforcing grid structure properties, iteration 0
Refinement level 4:
   Final regions are bboxset<CCTK_INT4,3>(set<bbox>:{([287,287,287]:[321,321,321]:[1,1,1]/[287,287,287]:[321,321,321]/[35,35,35]/42875)},stride:[1,1,1],offset:[0,0,0])
Determining domain outer boundary...
Refinement level 3: determining outer boundary...
Refinement level 3: physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 3: spacing is [4.7109375,4.7109375,4.7109375]
Refinement level 3: exterior coordinate boundary is at [[-617.1328125,-617.1328125,-617.1328125],[612.421875,612.421875,612.421875]]
Refinement level 3: stride is [2,2,2]
Refinement level 3: physical boundary is at [[48,48,48],[560,560,560]]
Refinement level 3: reconstructed physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 3: exterior boundary is at [[42,42,42],[564,564,564]]
Refinement level 3: reconstructed exterior coordinate boundary is at [[-617.1328125,-617.1328125,-617.1328125],[612.421875,612.421875,612.421875]]
Refinement level 3:
   Original regions are bboxset<CCTK_INT4,3>(set<bbox>:{([288,288,288]:[320,320,320]:[2,2,2]/[144,144,144]:[160,160,160]/[17,17,17]/4913)},stride:[2,2,2],offset:[0,0,0])
Refinement level 3: ensuring proper nesting...
   New regions are bboxset<CCTK_INT4,3>(set<bbox>:{([272,272,272]:[336,336,336]:[2,2,2]/[136,136,136]:[168,168,168]/[33,33,33]/35937)},stride:[2,2,2],offset:[0,0,0])
Refinement level 3: adding buffer zones...
   New regions are bboxset<CCTK_INT4,3>(set<bbox>:{([254,254,254]:[354,354,354]:[2,2,2]/[127,127,127]:[177,177,177]/[51,51,51]/132651)},stride:[2,2,2],offset:[0,0,0])
INFO (CarpetRegrid2): Enforcing grid structure properties, iteration 0
Refinement level 3:
   Final regions are bboxset<CCTK_INT4,3>(set<bbox>:{([254,254,254]:[354,354,354]:[2,2,2]/[127,127,127]:[177,177,177]/[51,51,51]/132651)},stride:[2,2,2],offset:[0,0,0])
Determining domain outer boundary...
Refinement level 2: determining outer boundary...
Refinement level 2: physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 2: spacing is [9.421875,9.421875,9.421875]
Refinement level 2: exterior coordinate boundary is at [[-631.265625,-631.265625,-631.265625],[621.84375,621.84375,621.84375]]
Refinement level 2: stride is [4,4,4]
Refinement level 2: physical boundary is at [[48,48,48],[560,560,560]]
Refinement level 2: reconstructed physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 2: exterior boundary is at [[36,36,36],[568,568,568]]
Refinement level 2: reconstructed exterior coordinate boundary is at [[-631.265625,-631.265625,-631.265625],[621.84375,621.84375,621.84375]]
Refinement level 2:
   Original regions are bboxset<CCTK_INT4,3>(set<bbox>:{([272,272,272]:[336,336,336]:[4,4,4]/[68,68,68]:[84,84,84]/[17,17,17]/4913)},stride:[4,4,4],offset:[0,0,0])
Refinement level 2: ensuring proper nesting...
   New regions are bboxset<CCTK_INT4,3>(set<bbox>:{([224,224,224]:[384,384,384]:[4,4,4]/[56,56,56]:[96,96,96]/[41,41,41]/68921)},stride:[4,4,4],offset:[0,0,0])
Refinement level 2: adding buffer zones...
   New regions are bboxset<CCTK_INT4,3>(set<bbox>:{([188,188,188]:[420,420,420]:[4,4,4]/[47,47,47]:[105,105,105]/[59,59,59]/205379)},stride:[4,4,4],offset:[0,0,0])
INFO (CarpetRegrid2): Enforcing grid structure properties, iteration 0
Refinement level 2:
   Final regions are bboxset<CCTK_INT4,3>(set<bbox>:{([188,188,188]:[420,420,420]:[4,4,4]/[47,47,47]:[105,105,105]/[59,59,59]/205379)},stride:[4,4,4],offset:[0,0,0])
Determining domain outer boundary...
Refinement level 1: determining outer boundary...
Refinement level 1: physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 1: spacing is [18.84375,18.84375,18.84375]
Refinement level 1: exterior coordinate boundary is at [[-659.53125,-659.53125,-659.53125],[640.6875,640.6875,640.6875]]
Refinement level 1: stride is [8,8,8]
Refinement level 1: physical boundary is at [[48,48,48],[560,560,560]]
Refinement level 1: reconstructed physical coordinate boundary is at [[-603,-603,-603],[603,603,603]]
Refinement level 1: exterior boundary is at [[24,24,24],[576,576,576]]
Refinement level 1: reconstructed exterior coordinate boundary is at [[-659.53125,-659.53125,-659.53125],[640.6875,640.6875,640.6875]]
Refinement level 1:
   Original regions are bboxset<CCTK_INT4,3>(set<bbox>:{([240,240,240]:[368,368,368]:[8,8,8]/[30,30,30]:[46,46,46]/[17,17,17]/4913)},stride:[8,8,8],offset:[0,0,0])
Refinement level 1: ensuring proper nesting...
   New regions are bboxset<CCTK_INT4,3>(set<bbox>:{([128,128,128]:[480,480,480]:[8,8,8]/[16,16,16]:[60,60,60]/[45,45,45]/91125)},stride:[8,8,8],offset:[0,0,0])
Refinement level 1: adding buffer zones...
   New regions are bboxset<CCTK_INT4,3>(set<bbox>:{([56,56,56]:[552,552,552]:[8,8,8]/[7,7,7]:[69,69,69]/[63,63,63]/250047)},stride:[8,8,8],offset:[0,0,0])
INFO (CarpetRegrid2): Enforcing grid structure properties, iteration 0
Refinement level 1: making regions periodic in the x direction...
   New regions are bboxset<CCTK_INT4,3>(set<bbox>:{([-456,56,56]:[40,552,552]:[8,8,8]/[-57,7,7]:[5,69,69]/[63,63,63]/250047),([56,56,56]:[552,552,552]:[8,8,8]/[7,7,7]:[69,69,69]/[63,63,63]/250047),([568,56,56]:[1064,552,552]:[8,8,8]/[71,7,7]:[133,69,69]/[63,63,63]/250047)},stride:[8,8,8],offset:[0,0,0])
Refinement level 1: making regions periodic in the y direction...
   New regions are bboxset<CCTK_INT4,3>(set<bbox>:{([-456,-456,56]:[40,40,552]:[8,8,8]/[-57,-57,7]:[5,5,69]/[63,63,63]/250047),([56,-456,56]:[552,40,552]:[8,8,8]/[7,-57,7]:[69,5,69]/[63,63,63]/250047),([568,-456,56]:[1064,40,552]:[8,8,8]/[71,-57,7]:[133,5,69]/[63,63,63]/250047),([-456,56,56]:[40,552,552]:[8,8,8]/[-57,7,7]:[5,69,69]/[63,63,63]/250047),([56,56,56]:[552,552,552]:[8,8,8]/[7,7,7]:[69,69,69]/[63,63,63]/250047),([568,56,56]:[1064,552,552]:[8,8,8]/[71,7,7]:[133,69,69]/[63,63,63]/250047),([-456,568,56]:[40,1064,552]:[8,8,8]/[-57,71,7]:[5,133,69]/[63,63,63]/250047),([56,568,56]:[552,1064,552]:[8,8,8]/[7,71,7]:[69,133,69]/[63,63,63]/250047),([568,568,56]:[1064,1064,552]:[8,8,8]/[71,71,7]:[133,133,69]/[63,63,63]/250047)},stride:[8,8,8],offset:[0,0,0])
Refinement level 1: making regions periodic in the z direction...
   New regions are bboxset<CCTK_INT4,3>(set<bbox>:{([-456,-456,-456]:[40,40,40]:[8,8,8]/[-57,-57,-57]:[5,5,5]/[63,63,63]/250047),([56,-456,-456]:[552,40,40]:[8,8,8]/[7,-57,-57]:[69,5,5]/[63,63,63]/250047),([568,-456,-456]:[1064,40,40]:[8,8,8]/[71,-57,-57]:[133,5,5]/[63,63,63]/250047),([-456,56,-456]:[40,552,40]:[8,8,8]/[-57,7,-57]:[5,69,5]/[63,63,63]/250047),([56,56,-456]:[552,552,40]:[8,8,8]/[7,7,-57]:[69,69,5]/[63,63,63]/250047),([568,56,-456]:[1064,552,40]:[8,8,8]/[71,7,-57]:[133,69,5]/[63,63,63]/250047),([-456,568,-456]:[40,1064,40]:[8,8,8]/[-57,71,-57]:[5,133,5]/[63,63,63]/250047),([56,568,-456]:[552,1064,40]:[8,8,8]/[7,71,-57]:[69,133,5]/[63,63,63]/250047),([568,568,-456]:[1064,1064,40]:[8,8,8]/[71,71,-57]:[133,133,5]/[63,63,63]/250047),([-456,-456,56]:[40,40,552]:[8,8,8]/[-57,-57,7]:[5,5,69]/[63,63,63]/250047),([56,-456,56]:[552,40,552]:[8,8,8]/[7,-57,7]:[69,5,69]/[63,63,63]/250047),([568,-456,56]:[1064,40,552]:[8,8,8]/[71,-57,7]:[133,5,69]/[63,63,63]/250047),([-456,56,56]:[40,552,552]:[8,8,8]/[-57,7,7]:[5,69,69]/[63,63,63]/250047),([56,56,56]:[552,552,552]:[8,8,8]/[7,7,7]:[69,69,69]/[63,63,63]/250047),([568,56,56]:[1064,552,552]:[8,8,8]/[71,7,7]:[133,69,69]/[63,63,63]/250047),([-456,568,56]:[40,1064,552]:[8,8,8]/[-57,71,7]:[5,133,69]/[63,63,63]/250047),([56,568,56]:[552,1064,552]:[8,8,8]/[7,71,7]:[69,133,69]/[63,63,63]/250047),([568,568,56]:[1064,1064,552]:[8,8,8]/[71,71,7]:[133,133,69]/[63,63,63]/250047),([-456,-456,568]:[40,40,1064]:[8,8,8]/[-57,-57,71]:[5,5,133]/[63,63,63]/250047),([56,-456,568]:[552,40,1064]:[8,8,8]/[7,-57,71]:[69,5,133]/[63,63,63]/250047),([568,-456,568]:[1064,40,1064]:[8,8,8]/[71,-57,71]:[133,5,133]/[63,63,63]/250047),([-456,56,568]:[40,552,1064]:[8,8,8]/[-57,7,71]:[5,69,133]/[63,63,63]/250047),([56,56,568]:[552,552,1064]:[8,8,8]/[7,7,71]:[69,69,133]/[63,63,63]/250047),([568,56,568]:[1064,552,1064]:[8,8,8]/[71,7,71]:[133,69,133]/[63,63,63]/250047),([-456,568,568]:[40,1064,1064]:[8,8,8]/[-57,71,71]:[5,133,133]/[63,63,63]/250047),([56,568,568]:[552,1064,1064]:[8,8,8]/[7,71,71]:[69,133,133]/[63,63,63]/250047),([568,568,568]:[1064,1064,1064]:[8,8,8]/[71,71,71]:[133,133,133]/[63,63,63]/250047)},stride:[8,8,8],offset:[0,0,0])
Refinement level 1: clipping at outer boundary...
   New regions are bboxset<CCTK_INT4,3>(set<bbox>:{([24,24,24]:[576,576,576]:[8,8,8]/[3,3,3]:[72,72,72]/[70,70,70]/343000)},stride:[8,8,8],offset:[0,0,0])
INFO (CarpetRegrid2): Enforcing grid structure properties, iteration 1
Refinement level 1:
   Final regions are bboxset<CCTK_INT4,3>(set<bbox>:{([24,24,24]:[576,576,576]:[8,8,8]/[3,3,3]:[72,72,72]/[70,70,70]/343000)},stride:[8,8,8],offset:[0,0,0])
INFO (Carpet): Grid structure (superregions, grid points):
   [0][0][0]   exterior: [0,0,0] : [37,37,37]   ([38,38,38] + PADDING) 54872
   [1][0][0]   exterior: [3,3,3] : [72,72,72]   ([70,70,70] + PADDING) 343000
   [2][0][0]   exterior: [47,47,47] : [105,105,105]   ([59,59,59] + PADDING) 205379
   [3][0][0]   exterior: [127,127,127] : [177,177,177]   ([51,51,51] + PADDING) 132651
   [4][0][0]   exterior: [287,287,287] : [321,321,321]   ([35,35,35] + PADDING) 42875
INFO (Carpet): Grid structure (superregions, coordinates):
   [0][0][0]   exterior: [-716.0625,-716.0625,-716.0625] : [678.375,678.375,678.375] : [37.6875,37.6875,37.6875]
   [1][0][0]   exterior: [-659.53125,-659.53125,-659.53125] : [640.6875,640.6875,640.6875] : [18.84375,18.84375,18.84375]
   [2][0][0]   exterior: [-273.234375,-273.234375,-273.234375] : [273.234375,273.234375,273.234375] : [9.421875,9.421875,9.421875]
   [3][0][0]   exterior: [-117.7734375,-117.7734375,-117.7734375] : [117.7734375,117.7734375,117.7734375] : [4.7109375,4.7109375,4.7109375]
   [4][0][0]   exterior: [-40.04296875,-40.04296875,-40.04296875] : [40.04296875,40.04296875,40.04296875] : [2.35546875,2.35546875,2.35546875]
INFO (Carpet): Global grid structure statistics:
INFO (Carpet): GF: rhs: 39k active, 101k owned (+161%), 188k total (+87%), 31 steps/time
INFO (Carpet): GF: vars: 275, pts: 111M active, 186M owned (+67%), 329M total (+77%), 1.0 comp/proc
INFO (Carpet): GA: vars: 287, pts: 0M active, 0M total (+0%)
INFO (Carpet): Total required memory: 2.610 GByte (for GAs and currently active GFs)
INFO (Carpet): Load balance:  min     avg     max     sdv     max/avg-1
INFO (Carpet): Level  0:       1M      2M      2M      0M owned      3%
INFO (Carpet): Level  1:      11M     12M     12M      1M owned      3%
INFO (Carpet): Level  2:       9M      9M     10M      0M owned      3%
INFO (Carpet): Level  3:       6M      6M      6M      0M owned      4%
INFO (Carpet): Level  4:       2M      2M      2M      0M owned      6%
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>3.7687500e+01  dy=>3.7687500e+01  dz=>3.7687500e+01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-716.062,678.375]  y=>[-716.062,678.375]  z=>[-716.062,678.375]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,37]  y=>[0,37]  z=>[0,37]
INFO (ICPertFLRW_GRH): Define time spacing: dtfac = dtfac * scale factor
INFO (ICPertFLRW_GRH): The initial scale factor is     0.484351E-02
INFO (ICPertFLRW_GRH): dtfac is     0.484351E-03
INFO (Time): Timestep set to 0.018254 (courant_static)
INFO (GRHydro): Trying to get EOS handles
INFO (GRHydro): Trying to get EOS handles
INFO (GRHydro): GRHydro will use the 2D_Polytrope equation of state.
INFO (GRHydro): Setting up the atmosphere mask: all points are not_atmosphere
INFO (ICPertFLRW_GRH): Scale factor normalised to reference redshift time
INFO (Time): Timestep set to 0.00912699 (courant_static)
INFO (GRHydro): Setting up the atmosphere mask: all points are not_atmosphere
INFO (ICPertFLRW_GRH): Scale factor normalised to reference redshift time
INFO (Time): Timestep set to 0.0045635 (courant_static)
INFO (GRHydro): Setting up the atmosphere mask: all points are not_atmosphere
INFO (ICPertFLRW_GRH): Scale factor normalised to reference redshift time
INFO (Time): Timestep set to 0.00228175 (courant_static)
INFO (GRHydro): Setting up the atmosphere mask: all points are not_atmosphere
INFO (ICPertFLRW_GRH): Scale factor normalised to reference redshift time
INFO (Time): Timestep set to 0.00114087 (courant_static)
INFO (GRHydro): Setting up the atmosphere mask: all points are not_atmosphere
INFO (ICPertFLRW_GRH): Scale factor normalised to reference redshift time
INFO (CarpetIOHDF5): ---------------------------------------------------------
INFO (CarpetIOHDF5): Dumping initial checkpoint at iteration 0, simulation time 1
INFO (CarpetIOHDF5): ---------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
Iteration      Time | ADMBASE::gxx | ADMBASE::kxx | ADMBASE::alp | *BASE::dtalp | *OLAPSE::tau | *ROBASE::rho |   ML_BSSN::H
                    |      average |      average |      average |      average |      average |      average |      average
----------------------------------------------------------------------------------------------------------------------------
        0     1.000 |    0.0000235 |   -0.0000156 |    1.0000000 |   -0.0000197 |    1.0000000 |    0.0530281 | 6.329901e-09
        1     1.001 |    0.0000235 |   -0.0000156 |    1.0000000 |   -0.0000192 |    1.0006442 |    0.0529607 |    0.0008186
        2     1.002 |    0.0000235 |   -0.0000156 |    1.0000000 |   -0.0000186 |    1.0014359 |    0.0528778 |    0.0019356
        3     1.003 |    0.0000235 |   -0.0000157 |    1.0000000 |   -0.0000179 |    1.0023735 |    0.0527797 |    0.0028084
        4     1.005 |    0.0000236 |   -0.0000157 |    0.9999999 |   -0.0000170 |    1.0034574 |    0.0526663 |    0.0036181
        5     1.006 |    0.0000236 |   -0.0000157 |    0.9999999 |   -0.0000161 |    1.0046674 |    0.0525397 |    0.0033211
        6     1.007 |    0.0000236 |   -0.0000157 |    0.9999999 |   -0.0000151 |    1.0060157 |    0.0523987 |    0.0027173
        7     1.008 |    0.0000237 |   -0.0000157 |    0.9999999 |   -0.0000139 |    1.0075022 |    0.0522432 |    0.0015894
        8     1.009 |    0.0000237 |   -0.0000157 |    0.9999999 |   -0.0000127 |    1.0091270 |    0.0520733 |    0.0000119
        9     1.010 |    0.0000238 |   -0.0000157 |    0.9999998 |   -0.0000118 |    1.0102679 |    0.0519557 |   -0.0003268
       10     1.011 |    0.0000238 |   -0.0000157 |    0.9999998 |   -0.0000109 |    1.0114087 |    0.0518386 |   -0.0004401
       11     1.013 |    0.0000239 |   -0.0000157 |    0.9999998 |   -0.0000101 |    1.0125496 |    0.0517218 |   -0.0003279
       12     1.014 |    0.0000239 |   -0.0000157 |    0.9999998 |   -0.0000093 |    1.0136905 |    0.0516055 |    0.0000103
       13     1.015 |    0.0000239 |   -0.0000157 |    0.9999998 |   -0.0000084 |    1.0148314 |    0.0514895 |    0.0000089
       14     1.016 |    0.0000240 |   -0.0000157 |    0.9999998 |   -0.0000076 |    1.0159722 |    0.0513739 |    0.0000070
       15     1.017 |    0.0000240 |   -0.0000157 |    0.9999998 |   -0.0000067 |    1.0171131 |    0.0512588 |    0.0000048
       16     1.018 |    0.0000240 |   -0.0000157 |    0.9999998 |   -0.0000059 |    1.0182540 |    0.0511440 |    0.0000113
       17     1.019 |    0.0000241 |   -0.0000157 |    0.9999998 |   -0.0000051 |    1.0193949 |    0.0510296 |    0.0000104
       18     1.021 |    0.0000241 |   -0.0000157 |    0.9999998 |   -0.0000043 |    1.0205357 |    0.0509156 |    0.0000093
       19     1.022 |    0.0000241 |   -0.0000158 |    0.9999998 |   -0.0000035 |    1.0216766 |    0.0508019 |    0.0000081
----------------------------------------------------------------------------------------------------------------------------
Iteration      Time | ADMBASE::gxx | ADMBASE::kxx | ADMBASE::alp | *BASE::dtalp | *OLAPSE::tau | *ROBASE::rho |   ML_BSSN::H
                    |      average |      average |      average |      average |      average |      average |      average
----------------------------------------------------------------------------------------------------------------------------
       20     1.023 |    0.0000242 |   -0.0000158 |    0.9999997 |   -0.0000027 |    1.0228175 |    0.0506886 |    0.0000074
       21     1.024 |    0.0000242 |   -0.0000158 |    0.9999997 |   -0.0000018 |    1.0239584 |    0.0505758 |    0.0000062
       22     1.025 |    0.0000242 |   -0.0000158 |    0.9999997 |   -0.0000010 |    1.0250992 |    0.0504633 |    0.0000049
       23     1.026 |    0.0000243 |   -0.0000158 |    0.9999997 |   -0.0000002 |    1.0262401 |    0.0503511 |    0.0000036
       24     1.027 |    0.0000243 |   -0.0000158 |    0.9999997 |    0.0000005 |    1.0273810 |    0.0502394 |    0.0000112
       25     1.029 |    0.0000244 |   -0.0000158 |    0.9999997 |    0.0000013 |    1.0285219 |    0.0501280 |    0.0000104
       26     1.030 |    0.0000244 |   -0.0000158 |    0.9999997 |    0.0000021 |    1.0296627 |    0.0500170 |    0.0000095
       27     1.031 |    0.0000244 |   -0.0000158 |    0.9999997 |    0.0000029 |    1.0308036 |    0.0499063 |    0.0000084
       28     1.032 |    0.0000245 |   -0.0000158 |    0.9999998 |    0.0000037 |    1.0319445 |    0.0497960 |    0.0000077
       29     1.033 |    0.0000245 |   -0.0000158 |    0.9999998 |    0.0000045 |    1.0330853 |    0.0496861 |    0.0000065
       30     1.034 |    0.0000245 |   -0.0000158 |    0.9999998 |    0.0000052 |    1.0342262 |    0.0495766 |    0.0000052
       31     1.035 |    0.0000246 |   -0.0000158 |    0.9999998 |    0.0000060 |    1.0353671 |    0.0494674 |    0.0000037
       32     1.037 |    0.0000246 |   -0.0000158 |    0.9999998 |    0.0000068 |    1.0365080 |    0.0493586 |    0.0000111
       33     1.038 |    0.0000246 |   -0.0000158 |    0.9999998 |    0.0000075 |    1.0376488 |    0.0492501 |    0.0000103
       34     1.039 |    0.0000247 |   -0.0000158 |    0.9999998 |    0.0000083 |    1.0387897 |    0.0491420 |    0.0000094
       35     1.040 |    0.0000247 |   -0.0000158 |    0.9999998 |    0.0000090 |    1.0399306 |    0.0490342 |    0.0000083
       36     1.041 |    0.0000248 |   -0.0000159 |    0.9999998 |    0.0000098 |    1.0410715 |    0.0489268 |    0.0000077

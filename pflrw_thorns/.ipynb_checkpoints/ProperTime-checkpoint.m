SetEnhancedTimes[False];

(****************************************************************************************************************************************************************************************************************************************************************************************************************************)
(* Options *)
(****************************************************************************************************************************************************************************************************************************************************************************************************************************)

createCode[derivOrder_, useJacobian_, evolutionTimelevels_] :=
Module[{},
ThornName = "ProperTime";

(****************************************************************************************************************************************************************************************************************************************************************************************************************************)
(* Tensors *)
(****************************************************************************************************************************************************************************************************************************************************************************************************************************)

Map [DefineTensor, {g, a, b, tau}];
Map [AssertSymmetricIncreasing, {g[la,lb]}];

(* Use the ADMBase variable names *)
g11=gxx; g12=gxy; g22=gyy; g13=gxz; g23=gyz; g33=gzz;
a=alp;
b1=betax; b2=betay; b3=betaz;

(****************************************************************************************************************************************************************************************************************************************************************************************************************************)
(* Groups *)
(****************************************************************************************************************************************************************************************************************************************************************************************************************************)

ThornGroups = {SetGroupName [CreateGroupFromTensor [tau], "propertime"]};

extraGroups =
  {{"ADMBase::metric",  {gxx, gxy, gxz, gyy, gyz, gzz}},
   {"ADMBase::lapse",   {alp}},
   {"ADMBase::shift",   {betax, betay, betaz}}
};

declaredGroupNames = Map [First, ThornGroups];
groups = Join [ThornGroups, extraGroups];
       
(****************************************************************************************************************************************************************************************************************************************************************************************************************************)
(* Initial data *)
(****************************************************************************************************************************************************************************************************************************************************************************************************************************)

initialise =
{
  Name -> ThornName <> "_Initial",
  Schedule -> {"IN CCTK_INITIAL"},
  Where -> Everywhere,
  Equations ->
  {
    tau -> t
  }
};

(****************************************************************************************************************************************************************************************************************************************************************************************************************************)
(* Evolution equations *)
(****************************************************************************************************************************************************************************************************************************************************************************************************************************)

evolCalc =
{
  Name -> ThornName <> "_RHS",
  Schedule -> {"IN MoL_CalcRHS"},
  Where -> Everywhere,
  Equations ->
  {
    dot[tau] -> (a^2 - b[ua] b[ub] g[la,lb])^(1/2)
  }
};
       
initRHSCalc =
{
  Name -> ThornName <> "_InitRHS",
  Schedule -> {"AT analysis BEFORE " <> ThornName <> "_RHS"},
  Where -> Everywhere,
  Equations -> 
  {
    dot[tau] -> 0
  }
};



(****************************************************************************************************************************************************************************************************************************************************************************************************************************)
(* Construct the thorn *)
(****************************************************************************************************************************************************************************************************************************************************************************************************************************)

inheritedImplementations = {"ADMBase"};

calculations =
{
  initialise,
  evolCalc,
  initRHSCalc
};

CreateKrancThornTT [groups, ".", ThornName,
  Calculations -> calculations,
  DeclaredGroups -> declaredGroupNames,
  EvolutionTimelevels -> evolutionTimelevels,
  DefaultEvolutionTimelevels -> 3,
  UseJacobian -> useJacobian,
  UseLoopControl -> True,
  UseVectors -> False,
  InheritedImplementations -> inheritedImplementations
];

];

createCode[4, True, 3];
